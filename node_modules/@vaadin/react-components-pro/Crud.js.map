{
  "version": 3,
  "sources": ["src/Crud.ts", "src/generated/Crud.ts"],
  "sourcesContent": ["export * from \"@vaadin/crud/vaadin-crud.js\";\n/**\n * @license\n * Copyright (c) 2000 - 2024 Vaadin Ltd.\n *\n * This program is available under Vaadin Commercial License and Service Terms.\n *\n *\n * See https://vaadin.com/commercial-license-and-service-terms for the full\n * license.\n */\nexport * from './generated/Crud.js';\n\n/**\n * A helper function that allows declaring the value path (or key) on\n * the fields in a custom form of a `<Crud />` component.\n *\n * ### Usage\n *\n * ```tsx\n * <Crud>\n *   <FormLayout slot=\"form\">\n *     <TextField label=\"Name\" {...crudPath('name')} />\n *   </FormLayout>\n * </Crud>\n * ```\n *\n * @param path The path of the particular field's value in the CRUD\n * item objects.\n *\n * @returns object with HTML attribute values recognized on a CRUD form field.\n */\nexport function crudPath(path: string): Record<string, string> {\n  return { path } as Record<string, string>;\n}\n", "import type { EventName } from \"@lit/react\";\nimport { Crud as CrudElement, type CrudEventMap as _CrudEventMap, } from \"@vaadin/crud/vaadin-crud.js\";\nimport * as React from \"react\";\nimport { createComponent, type WebComponentProps } from \"../utils/createComponent.js\";\nexport { CrudElement, };\nexport type CrudEventMap<T1> = Readonly<{\n    onCancel: EventName<_CrudEventMap<T1>[\"cancel\"]>;\n    onDelete: EventName<_CrudEventMap<T1>[\"delete\"]>;\n    onEdit: EventName<_CrudEventMap<T1>[\"edit\"]>;\n    onNew: EventName<_CrudEventMap<T1>[\"new\"]>;\n    onSave: EventName<_CrudEventMap<T1>[\"save\"]>;\n    onItemsChanged: EventName<_CrudEventMap<T1>[\"items-changed\"]>;\n    onEditedItemChanged: EventName<_CrudEventMap<T1>[\"edited-item-changed\"]>;\n    onEditorOpenedChanged: EventName<_CrudEventMap<T1>[\"editor-opened-changed\"]>;\n    onSizeChanged: EventName<_CrudEventMap<T1>[\"size-changed\"]>;\n}>;\nconst events = { onCancel: \"cancel\", onDelete: \"delete\", onEdit: \"edit\", onNew: \"new\", onSave: \"save\", onItemsChanged: \"items-changed\", onEditedItemChanged: \"edited-item-changed\", onEditorOpenedChanged: \"editor-opened-changed\", onSizeChanged: \"size-changed\" } as CrudEventMap<unknown>;\nexport type CrudProps<T1> = WebComponentProps<CrudElement<T1>, CrudEventMap<T1>>;\nexport const Crud = createComponent({\n    elementClass: CrudElement, events, react: React, tagName: \"vaadin-crud\"\n}) as <T1>(props: CrudProps<T1> & React.RefAttributes<CrudElement<T1>>) => React.ReactElement | null;\n"],
  "mappings": "AAAA,WAAc,8BCCd,OAAS,QAAQA,MAAwD,8BACzE,UAAYC,MAAW,QACvB,OAAS,mBAAAC,MAA+C,6BAaxD,IAAMC,EAAS,CAAE,SAAU,SAAU,SAAU,SAAU,OAAQ,OAAQ,MAAO,MAAO,OAAQ,OAAQ,eAAgB,gBAAiB,oBAAqB,sBAAuB,sBAAuB,wBAAyB,cAAe,cAAe,EAErPC,EAAOC,EAAgB,CAChC,aAAcC,EAAa,OAAAH,EAAQ,MAAOI,EAAO,QAAS,aAC9D,CAAC,EDYM,SAASC,EAASC,EAAsC,CAC7D,MAAO,CAAE,KAAAA,CAAK,CAChB",
  "names": ["CrudElement", "React", "createComponent", "events", "Crud", "createComponent", "CrudElement", "React", "crudPath", "path"]
}
