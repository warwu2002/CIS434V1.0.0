import { type ReactElement, type ReactNode, type RefAttributes } from 'react';
import type { GridDefaultItem } from '@vaadin/react-components/Grid.js';
import type { GridColumnProps } from '@vaadin/react-components/GridColumn.js';
import { type GridProEditColumnElement, type GridProEditColumnProps as _GridProEditColumnProps } from './generated/GridProEditColumn.js';
import type { OmittedGridColumnHTMLAttributes } from '@vaadin/react-components/GridColumn.js';
export * from './generated/GridProEditColumn.js';
type GridColumnRenderer<TItem> = GridColumnProps<TItem>['renderer'];
type GridColumnHeaderFooterRenderer<TItem> = GridColumnProps<TItem>['footerRenderer'];
export type GridProEditColumnProps<TItem> = Partial<Omit<_GridProEditColumnProps<TItem>, 'children' | 'editModeRenderer' | 'footerRenderer' | 'header' | 'headerRenderer' | 'renderer' | keyof OmittedGridColumnHTMLAttributes<TItem>>> & Readonly<{
    children?: GridColumnRenderer<TItem>;
    editModeRenderer?: GridColumnRenderer<TItem>;
    footer?: ReactNode;
    /**
     * @deprecated Use `footer` instead.
     */
    footerRenderer?: GridColumnHeaderFooterRenderer<TItem>;
    header?: ReactNode;
    /**
     * @deprecated Use `header` instead.
     */
    headerRenderer?: GridColumnHeaderFooterRenderer<TItem>;
    renderer?: GridColumnRenderer<TItem>;
}>;
declare const ForwardedGridProEditColumn: <TItem = GridDefaultItem>(props: GridProEditColumnProps<TItem> & RefAttributes<GridProEditColumnElement<TItem>>) => ReactElement | null;
export { ForwardedGridProEditColumn as GridProEditColumn };
//# sourceMappingURL=GridProEditColumn.d.ts.map