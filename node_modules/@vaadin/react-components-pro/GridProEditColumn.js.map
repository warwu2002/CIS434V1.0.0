{
  "version": 3,
  "sources": ["src/GridProEditColumn.tsx", "src/generated/GridProEditColumn.ts"],
  "sourcesContent": ["export * from \"@vaadin/grid-pro/vaadin-grid-pro-edit-column.js\";\n/**\n * @license\n * Copyright (c) 2000 - 2024 Vaadin Ltd.\n *\n * This program is available under Vaadin Commercial License and Service Terms.\n *\n *\n * See https://vaadin.com/commercial-license-and-service-terms for the full\n * license.\n */\nimport React from 'react';\nimport {\n  type ForwardedRef,\n  forwardRef,\n  type ReactElement,\n  type ReactNode,\n  type RefAttributes,\n  createElement,\n} from 'react';\nimport type { GridBodyRenderer, GridDefaultItem } from '@vaadin/react-components/Grid.js';\nimport type { GridColumnElement, GridColumnProps } from '@vaadin/react-components/GridColumn.js';\nimport {\n  GridProEditColumn as _GridProEditColumn,\n  type GridProEditColumnElement,\n  type GridProEditColumnProps as _GridProEditColumnProps,\n} from './generated/GridProEditColumn.js';\nimport { useModelRenderer } from '@vaadin/react-components/renderers/useModelRenderer.js';\nimport { useSimpleOrChildrenRenderer } from '@vaadin/react-components/renderers/useSimpleOrChildrenRenderer.js';\nimport type { OmittedGridColumnHTMLAttributes } from '@vaadin/react-components/GridColumn.js';\n\nexport * from './generated/GridProEditColumn.js';\n\ntype GridColumnRenderer<TItem> = GridColumnProps<TItem>['renderer'];\ntype GridColumnHeaderFooterRenderer<TItem> = GridColumnProps<TItem>['footerRenderer'];\n\nexport type GridProEditColumnProps<TItem> = Partial<\n  Omit<\n    _GridProEditColumnProps<TItem>,\n    | 'children'\n    | 'editModeRenderer'\n    | 'footerRenderer'\n    | 'header'\n    | 'headerRenderer'\n    | 'renderer'\n    | keyof OmittedGridColumnHTMLAttributes<TItem>\n  >\n> &\n  Readonly<{\n    children?: GridColumnRenderer<TItem>;\n    editModeRenderer?: GridColumnRenderer<TItem>;\n    footer?: ReactNode;\n    /**\n     * @deprecated Use `footer` instead.\n     */\n    footerRenderer?: GridColumnHeaderFooterRenderer<TItem>;\n    header?: ReactNode;\n    /**\n     * @deprecated Use `header` instead.\n     */\n    headerRenderer?: GridColumnHeaderFooterRenderer<TItem>;\n    renderer?: GridColumnRenderer<TItem>;\n  }>;\n\ntype ReactBodyRenderer<TItem> = GridColumnRenderer<TItem> & {\n  __wrapperRenderer?: ReactBodyRenderer<TItem>;\n};\n\ntype EditColumnRendererRoot = HTMLElement & { __editColumnRenderer?: GridBodyRenderer };\n\ntype ClearFunction = (arg0: HTMLElement & { _content: EditColumnRendererRoot }) => void;\n\n/**\n * Wraps a React renderer function to render empty when requested\n *\n * @returns\n */\nfunction editColumnReactRenderer<TItem>(reactBodyRenderer?: ReactBodyRenderer<TItem> | null) {\n  if (!reactBodyRenderer) {\n    return undefined;\n  }\n\n  reactBodyRenderer.__wrapperRenderer ||= function GridProEditColumnRenderer(props) {\n    // If the model has __renderEmpty set, return null, otherwise call the original renderer\n    return '__renderEmpty' in props.model ? null : createElement(reactBodyRenderer, props);\n  };\n\n  return reactBodyRenderer.__wrapperRenderer;\n}\n\n/**\n * Wraps a Grid body renderer function to make it request empty render before\n * the GridPro edit column clears cell content.\n */\nfunction editColumnRenderer(bodyRenderer?: (GridBodyRenderer & { __wrapperRenderer?: GridBodyRenderer }) | null) {\n  if (!bodyRenderer) {\n    return undefined;\n  }\n\n  bodyRenderer.__wrapperRenderer ||= (\n    root: EditColumnRendererRoot,\n    column: GridColumnElement & {\n      __originalClearCellContent?: ClearFunction;\n      _clearCellContent?: ClearFunction;\n    },\n    model,\n  ) => {\n    // Patch the column's _clearCellContent function which is called internally by grid-pro\n    // when switching from edit mode to view mode and vice versa\n    if (!column.__originalClearCellContent) {\n      column.__originalClearCellContent = column._clearCellContent;\n\n      column._clearCellContent = (cell) => {\n        const cellRoot = cell._content;\n        // Call the original renderer with __renderEmpty set to true to clear the content it manages\n        cellRoot.__editColumnRenderer?.(cellRoot, column, Object.assign({}, model, { __renderEmpty: true }));\n        // Call the original clearCellContent function to manually clear the cell content\n        column.__originalClearCellContent?.(cell);\n      };\n    }\n\n    // Update the cell content's renderer reference so that the correct one is used\n    // to render empty when the cell is cleared\n    root.__editColumnRenderer = bodyRenderer;\n\n    // Call the original renderer\n    bodyRenderer(root, column, model);\n  };\n\n  return bodyRenderer.__wrapperRenderer;\n}\n\nfunction GridProEditColumn<TItem = GridDefaultItem>(\n  { children, footer, header, ...props }: GridProEditColumnProps<TItem>,\n  ref: ForwardedRef<GridProEditColumnElement<TItem>>,\n): ReactElement | null {\n  const [editModePortals, editModeRenderer] = useModelRenderer(editColumnReactRenderer(props.editModeRenderer), {\n    renderSync: true,\n  });\n  const [headerPortals, headerRenderer] = useSimpleOrChildrenRenderer(props.headerRenderer, header, {\n    renderSync: true,\n  });\n  const [footerPortals, footerRenderer] = useSimpleOrChildrenRenderer(props.footerRenderer, footer, {\n    renderSync: true,\n  });\n  const [bodyPortals, bodyRenderer] = useModelRenderer(editColumnReactRenderer(props.renderer ?? children), {\n    renderSync: true,\n  });\n\n  return (\n    <_GridProEditColumn<TItem>\n      {...props}\n      editModeRenderer={editColumnRenderer(editModeRenderer)}\n      footerRenderer={footerRenderer}\n      headerRenderer={headerRenderer}\n      ref={ref}\n      renderer={editColumnRenderer(bodyRenderer)}\n    >\n      {editModePortals}\n      {headerPortals}\n      {footerPortals}\n      {bodyPortals}\n    </_GridProEditColumn>\n  );\n}\n\nconst ForwardedGridProEditColumn = forwardRef(GridProEditColumn) as <TItem = GridDefaultItem>(\n  props: GridProEditColumnProps<TItem> & RefAttributes<GridProEditColumnElement<TItem>>,\n) => ReactElement | null;\n\nexport { ForwardedGridProEditColumn as GridProEditColumn };\n", "import type { EventName } from \"@lit/react\";\nimport { GridProEditColumn as GridProEditColumnElement, } from \"@vaadin/grid-pro/vaadin-grid-pro-edit-column.js\";\nimport * as React from \"react\";\nimport { createComponent, type WebComponentProps } from \"../utils/createComponent.js\";\nexport { GridProEditColumnElement, };\nexport type GridProEditColumnEventMap<T1> = Readonly<{\n    onEditorTypeChanged: EventName<CustomEvent<unknown>>;\n}>;\nconst events = { onEditorTypeChanged: \"editor-type-changed\" } as GridProEditColumnEventMap<unknown>;\nexport type GridProEditColumnProps<T1> = WebComponentProps<GridProEditColumnElement<T1>, GridProEditColumnEventMap<T1>>;\nexport const GridProEditColumn = createComponent({\n    elementClass: GridProEditColumnElement, events, react: React, tagName: \"vaadin-grid-pro-edit-column\"\n}) as <T1>(props: GridProEditColumnProps<T1> & React.RefAttributes<GridProEditColumnElement<T1>>) => React.ReactElement | null;\n"],
  "mappings": "AAAA,WAAc,kDAWd,MAAkB,QAClB,OAEE,cAAAA,EAIA,iBAAAC,MACK,QClBP,OAAS,qBAAqBC,MAAiC,kDAC/D,UAAYC,MAAW,QACvB,OAAS,mBAAAC,MAA+C,6BAKxD,IAAMC,EAAS,CAAE,oBAAqB,qBAAsB,EAE/CC,EAAoBC,EAAgB,CAC7C,aAAcC,EAA0B,OAAAH,EAAQ,MAAOI,EAAO,QAAS,6BAC3E,CAAC,EDeD,OAAS,oBAAAC,MAAwB,yDACjC,OAAS,+BAAAC,MAAmC,oEA0HxC,eAAAC,MAAA,oBAzEJ,SAASC,EAA+BC,EAAqD,CAC3F,GAAKA,EAIL,OAAAA,EAAkB,oBAAsB,SAAmCC,EAAO,CAEhF,MAAO,kBAAmBA,EAAM,MAAQ,KAAOC,EAAcF,EAAmBC,CAAK,CACvF,EAEOD,EAAkB,iBAC3B,CAMA,SAASG,EAAmBC,EAAqF,CAC/G,GAAKA,EAIL,OAAAA,EAAa,oBAAsB,CACjCC,EACAC,EAIAC,IACG,CAGED,EAAO,6BACVA,EAAO,2BAA6BA,EAAO,kBAE3CA,EAAO,kBAAqBE,GAAS,CACnC,IAAMC,EAAWD,EAAK,SAEtBC,EAAS,uBAAuBA,EAAUH,EAAQ,OAAO,OAAO,CAAC,EAAGC,EAAO,CAAE,cAAe,EAAK,CAAC,CAAC,EAEnGD,EAAO,6BAA6BE,CAAI,CAC1C,GAKFH,EAAK,qBAAuBD,EAG5BA,EAAaC,EAAMC,EAAQC,CAAK,CAClC,EAEOH,EAAa,iBACtB,CAEA,SAASM,EACP,CAAE,SAAAC,EAAU,OAAAC,EAAQ,OAAAC,EAAQ,GAAGZ,CAAM,EACrCa,EACqB,CACrB,GAAM,CAACC,EAAiBC,CAAgB,EAAIpB,EAAiBG,EAAwBE,EAAM,gBAAgB,EAAG,CAC5G,WAAY,EACd,CAAC,EACK,CAACgB,EAAeC,CAAc,EAAIrB,EAA4BI,EAAM,eAAgBY,EAAQ,CAChG,WAAY,EACd,CAAC,EACK,CAACM,EAAeC,CAAc,EAAIvB,EAA4BI,EAAM,eAAgBW,EAAQ,CAChG,WAAY,EACd,CAAC,EACK,CAACS,EAAajB,CAAY,EAAIR,EAAiBG,EAAwBE,EAAM,UAAYU,CAAQ,EAAG,CACxG,WAAY,EACd,CAAC,EAED,OACEb,EAACY,EAAA,CACE,GAAGT,EACJ,iBAAkBE,EAAmBa,CAAgB,EACrD,eAAgBI,EAChB,eAAgBF,EAChB,IAAKJ,EACL,SAAUX,EAAmBC,CAAY,EAExC,UAAAW,EACAE,EACAE,EACAE,GACH,CAEJ,CAEA,IAAMC,EAA6BC,EAAWb,CAAiB",
  "names": ["forwardRef", "createElement", "GridProEditColumnElement", "React", "createComponent", "events", "GridProEditColumn", "createComponent", "GridProEditColumnElement", "React", "useModelRenderer", "useSimpleOrChildrenRenderer", "jsxs", "editColumnReactRenderer", "reactBodyRenderer", "props", "createElement", "editColumnRenderer", "bodyRenderer", "root", "column", "model", "cell", "cellRoot", "GridProEditColumn", "children", "footer", "header", "ref", "editModePortals", "editModeRenderer", "headerPortals", "headerRenderer", "footerPortals", "footerRenderer", "bodyPortals", "ForwardedGridProEditColumn", "forwardRef"]
}
