import type { EventName } from "@lit/react";
import { Crud as CrudElement, type CrudEventMap as _CrudEventMap } from "@vaadin/crud/vaadin-crud.js";
import * as React from "react";
import { type WebComponentProps } from "../utils/createComponent.js";
export * from "@vaadin/crud/vaadin-crud.js";
export { CrudElement, };
export type CrudEventMap<T1> = Readonly<{
    onCancel: EventName<_CrudEventMap<T1>["cancel"]>;
    onDelete: EventName<_CrudEventMap<T1>["delete"]>;
    onEdit: EventName<_CrudEventMap<T1>["edit"]>;
    onNew: EventName<_CrudEventMap<T1>["new"]>;
    onSave: EventName<_CrudEventMap<T1>["save"]>;
    onItemsChanged: EventName<_CrudEventMap<T1>["items-changed"]>;
    onEditedItemChanged: EventName<_CrudEventMap<T1>["edited-item-changed"]>;
    onEditorOpenedChanged: EventName<_CrudEventMap<T1>["editor-opened-changed"]>;
    onSizeChanged: EventName<_CrudEventMap<T1>["size-changed"]>;
}>;
export type CrudProps<T1> = WebComponentProps<CrudElement<T1>, CrudEventMap<T1>>;
export declare const Crud: <T1>(props: CrudProps<T1> & React.RefAttributes<CrudElement<T1>>) => React.ReactElement | null;
//# sourceMappingURL=Crud.d.ts.map