import type { EventName } from "@lit/react";
import { GridPro as GridProElement, type GridProEventMap as _GridProEventMap } from "@vaadin/grid-pro/vaadin-grid-pro.js";
import * as React from "react";
import { type WebComponentProps } from "../utils/createComponent.js";
export * from "@vaadin/grid-pro/vaadin-grid-pro.js";
export { GridProElement, };
export type GridProEventMap<T1> = Readonly<{
    onActiveItemChanged: EventName<_GridProEventMap<T1>["active-item-changed"]>;
    onCellActivate: EventName<_GridProEventMap<T1>["cell-activate"]>;
    onColumnResize: EventName<_GridProEventMap<T1>["column-resize"]>;
    onExpandedItemsChanged: EventName<_GridProEventMap<T1>["expanded-items-changed"]>;
    onLoadingChanged: EventName<_GridProEventMap<T1>["loading-changed"]>;
    onSelectedItemsChanged: EventName<_GridProEventMap<T1>["selected-items-changed"]>;
    onCellFocus: EventName<_GridProEventMap<T1>["cell-focus"]>;
    onColumnReorder: EventName<_GridProEventMap<T1>["column-reorder"]>;
    onGridDragend: EventName<_GridProEventMap<T1>["grid-dragend"]>;
    onGridDragstart: EventName<_GridProEventMap<T1>["grid-dragstart"]>;
    onGridDrop: EventName<_GridProEventMap<T1>["grid-drop"]>;
    onCellEditStarted: EventName<_GridProEventMap<T1>["cell-edit-started"]>;
    onItemPropertyChanged: EventName<_GridProEventMap<T1>["item-property-changed"]>;
    onSizeChanged: EventName<CustomEvent<unknown>>;
    onDataProviderChanged: EventName<CustomEvent<unknown>>;
    onEnterNextRowChanged: EventName<CustomEvent<unknown>>;
    onSingleCellEditChanged: EventName<CustomEvent<unknown>>;
}>;
export type GridProProps<T1> = WebComponentProps<GridProElement<T1>, GridProEventMap<T1>>;
export declare const GridPro: <T1>(props: GridProProps<T1> & React.RefAttributes<GridProElement<T1>>) => React.ReactElement | null;
//# sourceMappingURL=GridPro.d.ts.map